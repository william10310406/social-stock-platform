services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock-insight-frontend
    ports:
      - "5173:5173"
      - "5174:5174"  # HMR WebSocket port
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
      - BACKEND_URL=http://stock-insight-backend:5000
    networks:
      - stock-insight-net
    volumes:
      - ./frontend:/app
      - /app/node_modules

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock-insight-backend
    ports:
      - "5001:5000"
    env_file:
      - .env.security
    environment:
      - FLASK_APP=app
      - FLASK_ENV=development
      - FLASK_CONFIG=dual_database
      - FLASK_DEBUG=1
      - SECRET_KEY=dev-secret-key-change-in-production
      - FERNET_KEY=V8M_miy2DA3EGRwFdOn50Fhw63aqQSvHeatCUjy9uHE=
      - DUAL_DATABASE_ENABLED=true
      - MSSQL_USER=sa
      - MSSQL_SA_PASSWORD=StrongP@ssw0rd!
      - MSSQL_HOST=stock-insight-hot-db
      - MSSQL_PORT=1433
      - MSSQL_HOT_DATABASE=StockInsight_Hot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=StrongP@ssw0rd!
      - POSTGRES_HOST=stock-insight-cold-db
      - POSTGRES_PORT=5432
      - POSTGRES_COLD_DATABASE=StockInsight_Cold
      - REDIS_URL=redis://stock-insight-redis:6379/0
      - DATABASE_URL=mssql+pyodbc://sa:StrongP@ssw0rd!@stock-insight-hot-db:1433/StockInsight_Hot?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes
      - ARCHIVAL_ENABLED=true
      - ARCHIVAL_CUTOFF_DAYS=30
      - MONITORING_ENABLED=true
    depends_on:
      hot-db:
        condition: service_healthy
      cold-db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "python", "/app/scripts/healthcheck.py", "--docker"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    networks:
      - stock-insight-net
    volumes:
      - ./backend:/app
      - ./security:/app/security
      - ./exports:/app/exports
      - ./scripts:/app/scripts
      - ./test:/app/test

  # 熱資料庫 - MSSQL Server 2022 (即時數據)
  hot-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: stock-insight-hot-db
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=StrongP@ssw0rd!
      - MSSQL_PID=Express
    user: "0:0"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "StrongP@ssw0rd!", "-Q", "SELECT 1", "-C"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - hot_db_data:/var/opt/mssql
      - ./mssql_backup:/mssql_backup
      - ./scripts:/app/scripts
    networks:
      - stock-insight-net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # 冷資料庫 - PostgreSQL 14 (歷史和分析數據)
  cold-db:
    image: postgres:14
    container_name: stock-insight-cold-db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=StockInsight_Cold
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=StrongP@ssw0rd!
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - cold_db_data:/var/lib/postgresql/data
      - ./postgres_backup:/postgres_backup
    networks:
      - stock-insight-net
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  redis:
    image: "redis:alpine"
    container_name: stock-insight-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data
    networks:
      - stock-insight-net

volumes:
  hot_db_data:
    driver: local
  cold_db_data:
    driver: local
  redis_data:
    driver: local

networks:
  stock-insight-net:
    driver: bridge 