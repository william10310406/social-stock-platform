# StockOS Makefile
# Áî®ÊñºÁ∑®Ë≠ØÊÑèË≠òÂÆπÂô®Á≥ªÁµ±ÂíåÈÅãË°åÊ∏¨Ë©¶

CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g -O2
INCLUDES = -I./src
LIBS = -lm

# ÁõÆÈåÑ
SRC_DIR = src
TEST_DIR = tests
BUILD_DIR = build
DOCS_DIR = docs

# Ê∫êÊñá‰ª∂
CONSCIOUSNESS_SOURCES = $(SRC_DIR)/consciousness/consciousness_container.c
MEMORY_SOURCES = $(SRC_DIR)/crazy_memory/crazy_memory.c $(SRC_DIR)/crazy_memory/buddy_allocator.c $(SRC_DIR)/crazy_memory/slab_allocator.c
KERNEL_MEMORY_SOURCES = $(SRC_DIR)/kernel/memory/pmm.c
KERNEL_SOURCES = $(SRC_DIR)/kernel/kernel.c $(SRC_DIR)/kernel/cli/memory_cli.c $(SRC_DIR)/kernel/entry.c $(SRC_DIR)/kernel/syscalls/memory_syscalls.c

# Ê∏¨Ë©¶Ê∫êÊñá‰ª∂
TEST_CONSCIOUSNESS_SOURCES = $(TEST_DIR)/test_consciousness_container.c
TEST_CONSCIOUSNESS_OBJECTS = $(TEST_CONSCIOUSNESS_SOURCES:.c=.o)

TEST_MEMORY_SOURCES = $(TEST_DIR)/test_kernel_memory_integration.c
TEST_MEMORY_OBJECTS = $(TEST_MEMORY_SOURCES:.c=.o)

DEMO_SOURCES = $(TEST_DIR)/demo_consciousness_usage.c

# ÁõÆÊ®ôÊñá‰ª∂
CONSCIOUSNESS_OBJECTS = $(CONSCIOUSNESS_SOURCES:.c=.o)
MEMORY_OBJECTS = $(MEMORY_SOURCES:.c=.o)
KERNEL_MEMORY_OBJECTS = $(KERNEL_MEMORY_SOURCES:.c=.o)
KERNEL_OBJECTS = $(KERNEL_SOURCES:.c=.o)
TEST_OBJECTS = $(TEST_CONSCIOUSNESS_OBJECTS) $(TEST_MEMORY_OBJECTS)
DEMO_OBJECTS = $(DEMO_SOURCES:.c=.o)

# ÂèØÂü∑Ë°åÊñá‰ª∂
TEST_EXECUTABLE = $(BUILD_DIR)/test_consciousness_container
TEST_KERNEL_MEMORY = $(BUILD_DIR)/test_kernel_memory_integration
DEMO_EXECUTABLE = $(BUILD_DIR)/demo_consciousness_usage
CONSCIOUSNESS_LIB = $(BUILD_DIR)/libconsciousness.a
MEMORY_LIB = $(BUILD_DIR)/libmemory.a
KERNEL_EXECUTABLE = $(BUILD_DIR)/stockos_kernel

# ÈªòË™çÁõÆÊ®ô
all: build_dir memory_lib consciousness_lib test_consciousness demo_consciousness test_kernel_memory

# ÂâµÂª∫ÊßãÂª∫ÁõÆÈåÑ
build_dir:
	@mkdir -p $(BUILD_DIR)
	@echo "üìÅ Created build directory"

# Á∑®Ë≠ØË®òÊÜ∂È´îÂ∫´
memory_lib: build_dir $(MEMORY_OBJECTS) $(KERNEL_MEMORY_OBJECTS)
	@echo "üíæ Building memory library..."
	ar rcs $(MEMORY_LIB) $(MEMORY_OBJECTS) $(KERNEL_MEMORY_OBJECTS)
	@echo "‚úÖ Memory library built: $(MEMORY_LIB)"

# Á∑®Ë≠ØÊÑèË≠òÂÆπÂô®Â∫´
consciousness_lib: build_dir $(CONSCIOUSNESS_OBJECTS)
	@echo "üß† Building consciousness library..."
	ar rcs $(CONSCIOUSNESS_LIB) $(CONSCIOUSNESS_OBJECTS)
	@echo "‚úÖ Consciousness library built: $(CONSCIOUSNESS_LIB)"

# Á∑®Ë≠ØÊ∏¨Ë©¶
test_consciousness: consciousness_lib memory_lib $(TEST_CONSCIOUSNESS_OBJECTS)
	@echo "üß™ Building consciousness tests..."
	$(CC) $(CFLAGS) $(INCLUDES) $(TEST_CONSCIOUSNESS_OBJECTS) $(CONSCIOUSNESS_LIB) $(MEMORY_LIB) $(LIBS) -o $(TEST_EXECUTABLE)
	@echo "‚úÖ Consciousness tests built: $(TEST_EXECUTABLE)"

# Á∑®Ë≠ØÊºîÁ§∫Á®ãÂ∫è
demo_consciousness: consciousness_lib $(DEMO_OBJECTS)
	@echo "üé≠ Building consciousness demo..."
	$(CC) $(CFLAGS) $(INCLUDES) $(DEMO_OBJECTS) $(CONSCIOUSNESS_LIB) $(LIBS) -o $(DEMO_EXECUTABLE)
	@echo "‚úÖ Consciousness demo built: $(DEMO_EXECUTABLE)"

# Á∑®Ë≠ØÂÖßÊ†∏Ë®òÊÜ∂È´îÊ∏¨Ë©¶
test_kernel_memory: memory_lib consciousness_lib $(TEST_MEMORY_OBJECTS)
	@echo "üß™ Building kernel memory integration test..."
	$(CC) $(CFLAGS) $(INCLUDES) $(TEST_MEMORY_OBJECTS) $(MEMORY_LIB) $(CONSCIOUSNESS_LIB) $(LIBS) -o $(TEST_KERNEL_MEMORY)
	@echo "‚úÖ Kernel memory test built: $(TEST_KERNEL_MEMORY)"

# Á∑®Ë≠ØÂÆåÊï¥ÂÖßÊ†∏ (Á∞°ÂåñÁâàÔºåÂÉÖÁî®ÊñºÊ∏¨Ë©¶)
kernel: memory_lib consciousness_lib $(KERNEL_OBJECTS)
	@echo "üñ•Ô∏è Building StockOS kernel..."
	$(CC) $(CFLAGS) $(INCLUDES) $(KERNEL_OBJECTS) $(MEMORY_LIB) $(CONSCIOUSNESS_LIB) $(LIBS) -o $(KERNEL_EXECUTABLE)
	@echo "‚úÖ StockOS kernel built: $(KERNEL_EXECUTABLE)"

# ÈÅãË°åÊ∏¨Ë©¶
test: test_consciousness
	@echo "üöÄ Running consciousness container tests..."
	@$(TEST_EXECUTABLE)

# ÈÅãË°åÊ∏¨Ë©¶‰∏¶È°ØÁ§∫Ë©≥Á¥∞Ëº∏Âá∫
test_verbose: test_consciousness
	@echo "üöÄ Running consciousness container tests (verbose)..."
	@$(TEST_EXECUTABLE) 2>&1 | tee test_output.log

# ÈÅãË°åÊºîÁ§∫Á®ãÂ∫è
demo: demo_consciousness
	@echo "üé≠ Running consciousness container demo..."
	@$(DEMO_EXECUTABLE)

# ÈÅãË°åÊºîÁ§∫Á®ãÂ∫è‰∏¶È°ØÁ§∫Ë©≥Á¥∞Ëº∏Âá∫
demo_verbose: demo_consciousness
	@echo "üé≠ Running consciousness container demo (verbose)..."
	@$(DEMO_EXECUTABLE) 2>&1 | tee demo_output.log

# ÈÅãË°åÂÖßÊ†∏Ë®òÊÜ∂È´îÊ∏¨Ë©¶
test_memory: test_kernel_memory
	@echo "üß™ Running kernel memory integration tests..."
	@$(TEST_KERNEL_MEMORY)

# ÈÅãË°åÂÖßÊ†∏Ë®òÊÜ∂È´îÊ∏¨Ë©¶ (Ë©≥Á¥∞Ê®°Âºè)
test_memory_verbose: test_kernel_memory
	@echo "üß™ Running kernel memory integration tests (verbose)..."
	@$(TEST_KERNEL_MEMORY) -v 2>&1 | tee memory_test_output.log

# ÈÅãË°åÊâÄÊúâÊ∏¨Ë©¶
test_all: test test_memory
	@echo "‚úÖ All tests completed"

# Ê∏ÖÁêÜ
clean:
	@echo "üßπ Cleaning build files..."
	rm -rf $(BUILD_DIR)
	rm -f $(CONSCIOUSNESS_OBJECTS) $(MEMORY_OBJECTS) $(KERNEL_MEMORY_OBJECTS) $(KERNEL_OBJECTS) $(TEST_CONSCIOUSNESS_OBJECTS) $(TEST_MEMORY_OBJECTS) $(DEMO_OBJECTS)
	rm -f test_output.log demo_output.log memory_test_output.log
	@echo "‚úÖ Clean complete"

# ÂÆâË£ùÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
install: consciousness_lib
	@echo "üì¶ Installing consciousness library..."
	@mkdir -p /usr/local/lib
	@mkdir -p /usr/local/include/stockos
	cp $(CONSCIOUSNESS_LIB) /usr/local/lib/
	cp $(SRC_DIR)/consciousness/consciousness_container.h /usr/local/include/stockos/
	@echo "‚úÖ Installation complete"

# Âç∏Ëºâ
uninstall:
	@echo "üóëÔ∏è Uninstalling consciousness library..."
	rm -f /usr/local/lib/libconsciousness.a
	rm -f /usr/local/include/stockos/consciousness_container.h
	@echo "‚úÖ Uninstallation complete"

# Ê™¢Êü•‰ª£Á¢ºÈ¢®Ê†º
lint:
	@echo "üîç Running code linting..."
	@if command -v clang-format >/dev/null 2>&1; then \
		clang-format --style=Google -i $(SRC_DIR)/consciousness/*.c $(SRC_DIR)/consciousness/*.h $(TEST_DIR)/*.c; \
		echo "‚úÖ Code formatting complete"; \
	else \
		echo "‚ö†Ô∏è clang-format not found, skipping formatting"; \
	fi

# ÈùúÊÖãÂàÜÊûê
analyze: consciousness_lib
	@echo "üî¨ Running static analysis..."
	@if command -v cppcheck >/dev/null 2>&1; then \
		cppcheck --enable=all --std=c99 $(SRC_DIR)/consciousness/ $(TEST_DIR)/; \
		echo "‚úÖ Static analysis complete"; \
	else \
		echo "‚ö†Ô∏è cppcheck not found, skipping static analysis"; \
	fi

# ÁîüÊàêÊñáÊ™î
docs:
	@echo "üìö Generating documentation..."
	@mkdir -p $(DOCS_DIR)
	@if command -v doxygen >/dev/null 2>&1; then \
		doxygen Doxyfile 2>/dev/null || echo "‚ö†Ô∏è Doxygen configuration not found"; \
		echo "‚úÖ Documentation generated"; \
	else \
		echo "‚ö†Ô∏è Doxygen not found, skipping documentation generation"; \
	fi

# ÊÄßËÉΩÊ∏¨Ë©¶
benchmark: test_consciousness
	@echo "‚ö° Running performance benchmarks..."
	@time $(TEST_EXECUTABLE) > /dev/null 2>&1
	@echo "‚úÖ Benchmark complete"

# Ë®òÊÜ∂È´îÊ™¢Êü•
memcheck: test_consciousness
	@echo "üîç Running memory check..."
	@if command -v valgrind >/dev/null 2>&1; then \
		valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes $(TEST_EXECUTABLE); \
		echo "‚úÖ Memory check complete"; \
	else \
		echo "‚ö†Ô∏è Valgrind not found, skipping memory check"; \
	fi

# Âπ´Âä©
help:
	@echo "StockOS Kernel Memory Management Build System"
	@echo "=============================================="
	@echo ""
	@echo "Available targets:"
	@echo "  all              - Build everything (default)"
	@echo "  memory_lib       - Build memory management library"
	@echo "  consciousness_lib - Build consciousness library"
	@echo "  kernel           - Build StockOS kernel"
	@echo "  test_consciousness - Build consciousness tests"
	@echo "  test_kernel_memory - Build kernel memory tests"
	@echo "  demo_consciousness - Build demo program"
	@echo "  test             - Build and run consciousness tests"
	@echo "  test_memory      - Build and run kernel memory tests"
	@echo "  test_all         - Run all tests"
	@echo "  test_verbose     - Run consciousness tests with detailed output"
	@echo "  test_memory_verbose - Run memory tests with detailed output"
	@echo "  demo             - Build and run demo program"
	@echo "  demo_verbose     - Build and run demo with detailed output"
	@echo "  clean            - Remove all build files"
	@echo "  install          - Install library to system"
	@echo "  uninstall        - Remove library from system"
	@echo "  lint             - Format code with clang-format"
	@echo "  analyze          - Run static analysis with cppcheck"
	@echo "  docs             - Generate documentation with Doxygen"
	@echo "  benchmark        - Run performance benchmarks"
	@echo "  memcheck         - Run memory leak detection"
	@echo "  docker-build     - Build cross-compile Docker image"
	@echo "  iso              - Build bootable StockOS.iso (Limine)"
	@echo "  qemu             - Run ISO in QEMU (serial console)"
	@echo ""
	@echo "üöÄ Quick Start for Kernel Memory Testing:"
	@echo "  make test_memory  - Test the integrated memory system"
	@echo "  make kernel       - Build the StockOS kernel"
	@echo ""
	@echo "Environment variables:"
	@echo "  CC               - C compiler (default: gcc)"
	@echo "  CFLAGS           - Compiler flags"
	@echo "  BUILD_DIR        - Build directory (default: build)"

# ÈÄöÁî®Á∑®Ë≠ØË¶èÂâá
%.o: %.c
	@echo "üî® Compiling $<..."
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# ‰æùË≥¥Èóú‰øÇ
$(SRC_DIR)/consciousness/consciousness_container.o: $(SRC_DIR)/consciousness/consciousness_container.h
$(TEST_DIR)/test_consciousness_container.o: $(SRC_DIR)/consciousness/consciousness_container.h
$(TEST_DIR)/demo_consciousness_usage.o: $(SRC_DIR)/consciousness/consciousness_container.h

# ÂÅΩÁõÆÊ®ô
.PHONY: all build_dir memory_lib consciousness_lib kernel test_consciousness test_kernel_memory demo_consciousness test test_memory test_all test_verbose test_memory_verbose demo demo_verbose clean install uninstall lint analyze docs benchmark memcheck help

# ---------------- Bootloader / ISO / QEMU ----------------
ISO_NAME = StockOS.iso
ASM = nasm
CLANG = clang

# Minimal kernel sources for bare-metal ISO (exclude user-space helpers)
BOOT_SOURCES = $(SRC_DIR)/kernel/kernel.c

# Pattern rule: compile kernel sources with Clang cross-compiler
$(BUILD_DIR)/%.o: %.c
	@mkdir -p $(dir $@)
	$(CLANG) --target=x86_64-elf -I./src -ffreestanding -DKERNEL_MODE -O2 -c $< -o $@

KERNEL_CLANG_OBJECTS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(BOOT_SOURCES))

kernel.elf: boot/stage1.asm $(KERNEL_CLANG_OBJECTS)
	$(ASM) -f elf64 boot/stage1.asm -o $(BUILD_DIR)/stage1.o
	$(CLANG) --target=x86_64-elf -T boot/linker.ld -nostdlib -ffreestanding -Wl,-z,max-page-size=0x200000 -o $(BUILD_DIR)/kernel.elf $(BUILD_DIR)/stage1.o $(KERNEL_CLANG_OBJECTS)

iso: kernel.elf
	cp $(BUILD_DIR)/kernel.elf boot/kernel.elf
	cp boot/limine.cfg build/
	/opt/limine/limine-install build
	mv build/image.iso $(ISO_NAME)
	@echo "‚úÖ ISO created: $(ISO_NAME)"

qemu: iso
	qemu-system-x86_64 -cdrom $(ISO_NAME) -m 256M -serial stdio -no-reboot -no-shutdown | cat

# Build Docker image for cross environment
docker-build:
	docker build -t stockos/dev-x86_64 docker/dev 