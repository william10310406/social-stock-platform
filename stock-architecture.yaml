project_name: Stock Insight Platform
purpose: >-
  An interactive, security‑hardened web platform that serves real‑time & historical
  stock data, live market news, social posting with comments/likes, friendship system,
  and real-time private chat functionality.

components:
  frontend:
    tech_stack: [HTML5, CSS3, JavaScript (ES6 modules), Vite, TailwindCSS]
    pages:
      - index.html            # landing page
      - login.html           # user authentication
      - register.html        # user registration
      - dashboard.html       # main dashboard with posts feed
      - profile.html         # user profile management
      - friends.html         # friend management (search, requests, friends list)
      - chat.html           # real-time chat interface
      - post.html           # individual post view with comments

    # 統一路徑管理系統
    path_management:
      description: "統一路徑管理系統 - 解決硬編碼路徑問題"
      core_config: "src/js/config/routes.js"
      architecture:
        single_source_of_truth: "所有路徑的統一配置中心"
        route_utils: "強大的路徑管理工具函數庫"
        automatic_migration: "自動路徑遷移工具"
        comprehensive_testing: "完整的測試覆蓋"
      benefits:
        - one_place_modification: "一處修改，處處生效"
        - zero_maintenance_overhead: "零維護開銷"
        - parameter_substitution: "支持參數化路徑"
        - environment_configuration: "環境配置支持"
        - ide_friendly: "IDE 友好的語義化 API"

    modules:
      core:
        - config/routes.js     # 統一路徑配置 - 所有路徑的單一真實來源
        - config/constants.js  # 系統常量配置
        - api.js              # API 工具函數 - 使用統一路徑管理
        - auth.js             # 認證管理 - JWT token 處理
        - template.js         # 模板引擎 - 使用統一組件路徑
        - main.js             # 共享工具函數

      features:
        - dashboard.js        # 儀表板 - 使用 RouteUtils 進行路徑管理
        - profile.js          # 個人資料 - 集成統一導航
        - friends.js          # 好友系統 - 統一重定向邏輯
        - chat.js             # 即時聊天 - 使用統一 API 路徑
        - post.js             # 文章系統 - 統一路徑導航
        - news.js             # 新聞功能
        - chart.js            # 股票圖表功能 (佔位符)

      utilities:
        - utils/pathManager.js    # 路徑管理工具 (已棄用 - 使用 RouteUtils)
        - utils/errorManager.js   # 錯誤管理系統
        - utils/loadingManager.js # 載入狀態管理
        - utils/websocket.js      # WebSocket 管理 - 使用統一路徑
        - utils/pwa.js           # PWA 功能支持

      scripts:
        - scripts/migrate-paths.js    # 自動路徑遷移工具
        - scripts/check-routes.js     # 路徑驗證腳本 - 使用統一配置
        - scripts/dependency-check.js # 依賴檢查工具 - 防止循環依賴
        - scripts/validate-links.js   # 鏈接驗證工具

    features:
      - responsive_design      # 響應式設計
      - chinese_localization   # 中文界面支持
      - real_time_updates     # 即時更新功能
      - friendship_system     # 完整好友管理系統
      - social_interactions   # 社交互動功能
      - unified_path_management # 統一路徑管理系統
      - automatic_error_handling # 自動錯誤處理
      - comprehensive_testing    # 完整測試覆蓋

    security:
      - input_sanitisation     # XSS 防護
      - jwt_token_validation   # 客戶端認證驗證
      - protected_routes       # 受保護路由
      - dependency_cycle_prevention # 循環依賴防護
      - path_validation        # 路徑驗證安全

  backend:
    framework: Flask 2.x + Gunicorn
    structure:
      entrypoint: run.py
      app_factory: app/__init__.py
      blueprints:
        auth:
          prefix: /api/auth
          endpoints:
            - path: /register         # POST - user registration
            - path: /login           # POST - user authentication
            - path: /profile         # GET/PUT - user profile management
        posts:
          prefix: /api/posts
          endpoints:
            - path: /                # GET - fetch all posts, POST - create post
            - path: /<id>           # GET - single post, DELETE - delete own post
            - path: /<id>/comments  # GET - post comments, POST - add comment
            - path: /<id>/like      # POST - like post, DELETE - unlike post
            - path: /myposts        # GET - user's own posts
        friends:
          prefix: /api/friends
          endpoints:
            - path: /               # GET - friends list
            - path: /search         # GET - search users by username
            - path: /requests       # POST - send friend request
            - path: /requests/pending # GET - pending friend requests
            - path: /requests/<id>  # PUT - accept/decline friend request
        chat:
          prefix: /api/chat
          endpoints:
            - path: /conversations  # GET - chat conversations list
            - path: /conversations/<user_id> # GET - get/create conversation with user
            - path: /conversations/<id>/messages # GET - fetch messages, POST - send message
            - path: /conversations/<id> # DELETE - delete conversation
        stocks:
          prefix: /api/stocks
          endpoints:
            - path: /watchlist      # GET/POST - user stock watchlist
            - path: /<symbol>/data  # GET - stock data (placeholder)
        news:
          prefix: /api/news
          endpoints:
            - path: /latest         # GET - latest news feed
    features:
      - jwt_based_authentication
      - friend_only_chat_restriction
      - real_time_message_polling
      - post_like_system
      - user_profile_management
      - friendship_workflow
    security_layers:
      - jwt_token_authentication
      - token_required_decorators
      - rate_limiting (Flask‑Limiter)
      - sql_parameterised_queries
      - cors_protection
      - request_logging (rotating file)
    cache_layer:
      type: Redis
      purpose: session & rate limit storage
    database_migrations:
      tool: Flask-Migrate (Alembic)
      latest_revision: c1234567890a (chat models)

  database:
    engine: PostgreSQL 14
    orm: SQLAlchemy + Flask-Migrate (Alembic)
    tables:
      users:
        columns:
          - id: INTEGER PRIMARY KEY AUTO_INCREMENT
          - username: VARCHAR(80) UNIQUE NOT NULL
          - email: VARCHAR(120) UNIQUE NOT NULL
          - password_hash: VARCHAR(256) NOT NULL
          - bio: TEXT NULL                      # user profile bio
        constraints:
          - UNIQUE(username)
          - UNIQUE(email)
          - CHECK(LENGTH(username) >= 3)
          - CHECK(LENGTH(password_hash) > 0)
        indexes:
          - username_idx: (username)
          - email_idx: (email)
      posts:
        columns:
          - id: INTEGER PRIMARY KEY AUTO_INCREMENT
          - author_id: INTEGER FK users(id) NOT NULL
          - title: VARCHAR(200) NOT NULL
          - body: TEXT NOT NULL
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
          - updated_at: DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        constraints:
          - FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE
          - CHECK(LENGTH(title) >= 1)
          - CHECK(LENGTH(body) >= 1)
        indexes:
          - author_idx: (author_id)
          - created_at_idx: (created_at DESC)
          - title_search_idx: (title) # for search functionality
        relationships:
          - author: User
          - comments: Comment[] (cascade delete)
          - likes: Like[] (cascade delete)
      comments:
        columns:
          - id: INTEGER PRIMARY KEY AUTO_INCREMENT
          - post_id: INTEGER FK posts(id) NOT NULL
          - author_id: INTEGER FK users(id) NOT NULL
          - body: TEXT NOT NULL
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
        constraints:
          - FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
          - FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE
          - CHECK(LENGTH(body) >= 1)
        indexes:
          - post_idx: (post_id)
          - author_idx: (author_id)
          - created_at_idx: (created_at DESC)
        relationships:
          - author: User
          - post: Post
      likes:
        columns:
          - user_id: INTEGER FK users(id) NOT NULL
          - post_id: INTEGER FK posts(id) NOT NULL
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
        primary_key: [user_id, post_id]
        constraints:
          - FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
          - FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
        indexes:
          - post_likes_idx: (post_id) # for counting likes per post
          - user_likes_idx: (user_id) # for user activity
      friendships:
        columns:
          - requester_id: INTEGER FK users(id) NOT NULL
          - addressee_id: INTEGER FK users(id) NOT NULL
          - status: VARCHAR(20) DEFAULT 'pending' NOT NULL  # pending, accepted, declined
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
          - updated_at: DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        primary_key: [requester_id, addressee_id]
        constraints:
          - FOREIGN KEY (requester_id) REFERENCES users(id) ON DELETE CASCADE
          - FOREIGN KEY (addressee_id) REFERENCES users(id) ON DELETE CASCADE
          - CHECK(requester_id != addressee_id) # prevent self-friendship
          - CHECK(status IN ('pending', 'accepted', 'declined'))
        indexes:
          - requester_idx: (requester_id)
          - addressee_idx: (addressee_id)
          - status_idx: (status)
          - pending_requests_idx: (addressee_id, status) # for pending requests lookup
      conversations:
        columns:
          - id: INTEGER PRIMARY KEY AUTO_INCREMENT
          - user1_id: INTEGER FK users(id) NOT NULL
          - user2_id: INTEGER FK users(id) NOT NULL
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
          - updated_at: DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        constraints:
          - FOREIGN KEY (user1_id) REFERENCES users(id) ON DELETE CASCADE
          - FOREIGN KEY (user2_id) REFERENCES users(id) ON DELETE CASCADE
          - CHECK(user1_id != user2_id) # prevent self-conversation
          - UNIQUE(user1_id, user2_id) # prevent duplicate conversations
        indexes:
          - user1_idx: (user1_id)
          - user2_idx: (user2_id)
          - updated_at_idx: (updated_at DESC) # for recent conversations
          - participants_idx: (user1_id, user2_id) # for conversation lookup
        relationships:
          - user1: User
          - user2: User
          - messages: Message[] (cascade delete)
      messages:
        columns:
          - id: INTEGER PRIMARY KEY AUTO_INCREMENT
          - conversation_id: INTEGER FK conversations(id) NOT NULL
          - sender_id: INTEGER FK users(id) NOT NULL
          - content: TEXT NOT NULL
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
          - is_read: BOOLEAN DEFAULT FALSE
        constraints:
          - FOREIGN KEY (conversation_id) REFERENCES conversations(id) ON DELETE CASCADE
          - FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE
          - CHECK(LENGTH(content) >= 1)
        indexes:
          - conversation_idx: (conversation_id, created_at DESC) # for message history
          - sender_idx: (sender_id)
          - unread_idx: (conversation_id, is_read) # for unread message counts
          - created_at_idx: (created_at DESC) # for pagination
        relationships:
          - conversation: Conversation
          - sender: User
      stocks:
        columns:
          - id: INTEGER PRIMARY KEY AUTO_INCREMENT
          - symbol: VARCHAR(20) UNIQUE NOT NULL
          - name: VARCHAR(100) NOT NULL
          - exchange: VARCHAR(50) NULL
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
          - updated_at: DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        constraints:
          - UNIQUE(symbol)
          - CHECK(LENGTH(symbol) >= 1)
          - CHECK(LENGTH(name) >= 1)
        indexes:
          - symbol_idx: (symbol) # primary lookup
          - exchange_idx: (exchange) # filter by exchange
          - name_search_idx: (name) # for name-based search
      user_stocks:
        columns:
          - user_id: INTEGER FK users(id) NOT NULL
          - stock_id: INTEGER FK stocks(id) NOT NULL
          - added_at: DATETIME DEFAULT CURRENT_TIMESTAMP
        primary_key: [user_id, stock_id]
        constraints:
          - FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
          - FOREIGN KEY (stock_id) REFERENCES stocks(id) ON DELETE CASCADE
        indexes:
          - user_watchlist_idx: (user_id) # user's watchlist
          - stock_watchers_idx: (stock_id) # who watches this stock
      news:
        columns:
          - id: INTEGER PRIMARY KEY AUTO_INCREMENT
          - title: VARCHAR(255) NOT NULL
          - source: VARCHAR(100) NULL
          - url: VARCHAR(255) UNIQUE NOT NULL
          - summary: TEXT NULL
          - published_at: DATETIME NOT NULL
          - created_at: DATETIME DEFAULT CURRENT_TIMESTAMP
        constraints:
          - UNIQUE(url)
          - CHECK(LENGTH(title) >= 1)
          - CHECK(LENGTH(url) >= 1)
        indexes:
          - published_at_idx: (published_at DESC) # for recent news
          - source_idx: (source) # filter by source
          - title_search_idx: (title) # for search functionality
          - url_idx: (url) # unique constraint support

deployment:
  containerization: Docker Compose
  services:
    frontend:
      image: node:18-alpine
      framework: Vite development server
      port: 5173
      features: [hot_reload, tailwind_watch]
    backend:
      image: python:3.10-slim
      server: Gunicorn with gthread workers
      port: 5000 (internal), 5001 (exposed)
      workers: 4
    database:
      image: postgres:14
      port: 5432
      features: [persistent_volume, health_checks]
    cache:
      image: redis:alpine
      port: 6379
      purpose: rate_limiting_storage

  current_features_implemented:
    authentication:
      - user_registration_with_validation
      - jwt_token_based_login
      - protected_route_middleware
      - profile_management
    social:
      - friend_request_system
      - accept_decline_friend_requests
      - user_search_functionality
      - friends_list_management
    content:
      - create_edit_delete_posts
      - threaded_comments_system
      - like_unlike_posts
      - user_post_history
    communication:
      - real_time_private_chat
      - conversation_management
      - message_history
      - unread_message_indicators
      - friend_only_chat_restriction
    ui_ux:
      - responsive_design_with_tailwind
      - chinese_localization
      - auto_refresh_functionality
      - modern_chat_interface
      - unified_navigation_system
    architecture:
      - unified_path_management_system
      - centralized_route_configuration
      - automatic_path_migration_tools
      - comprehensive_testing_framework
      - dependency_cycle_prevention
      - development_safety_guidelines

  development_status:
    completed: [auth, social, posts, chat, basic_ui, path_management_system]
    in_progress: [stock_data_integration, news_feed]
    planned: [real_time_notifications, advanced_stock_charts]

notes:
  - JWT tokens stored in localStorage for client authentication
  - Chat messages auto-refresh every 3 seconds
  - Friend-only chat restriction enforced at API level
  - All database migrations managed through Flask-Migrate
  - Chinese interface with responsive TailwindCSS design
  - PostgreSQL for production-ready data persistence
  - Unified path management system eliminates hardcoded paths across all JS files
  - RouteUtils provides semantic API for path operations with parameter substitution
  - Automatic migration tools and comprehensive testing ensure zero-error deployment
  - Development safety guidelines prevent dependency cycles and maintain architecture integrity
```
